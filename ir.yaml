esphome:
  name: "ir"
  friendly_name: IR

  includes:
     - irfunctions.h

packages:
  wifi: !include wifi.yaml

esp8266:
  board: esp12e

# Enable logging
logger:
  level: DEBUG

# Enable Home Assistant API
api:
  id: api_server

ota:
 
web_server:
  port: 80

captive_portal:

text_sensor:
  - platform: template
    name: "Remote Raw Code Sensor"
    id: ir_remote_raw
  - platform: template
    name: "Remote Code Sensor"
    id: ir_remote_code

remote_receiver:
  pin: 
    number: GPIO14
    inverted: true
  dump: raw
#  dump: all
  idle: 100ms

# rc5 decode appears to be broken
  on_rc5:
    then:
      - lambda: !lambda |-
          std::string s=str_sprintf("{\"protocol\":\"rc5\",\"address\":0x%x,\"command\":0x%x}",
                                    x.address,x.command);
          id(ir_remote_code).publish_state(s);

  on_nec:
    then:
      - lambda: !lambda |-
          std::string s=str_sprintf("{\"protocol\":\"nec\",\"address\":0x%x,\"command\":0x%x,\"command_repeats\":0x%x}",
                                    x.address,x.command,x.command_repeats);
          id(ir_remote_code).publish_state(s);

  on_rc6:
    then:
      - lambda: !lambda |-
          std::string s=str_sprintf("{\"protocol\":\"rc6\",\"address\":0x%x,\"command\":0x%x,\"mode\":0x%x,\"toggle\":0x%x}",
                                    x.address,x.command,x.mode,x.toggle);
          id(ir_remote_code).publish_state(s);

  on_sony:
    then:
      - lambda: !lambda |-
          std::string s=str_sprintf("{\"protocol\":\"sony\",\"data\":0x%x,\"nbits\":0x%x",
                                    x.data,x.nbits);
          id(ir_remote_code).publish_state(s);
  on_samsung:
    then:
      - lambda: !lambda |-
          std::string s=str_sprintf("{\"protocol\":\"samsung\",\"data\":0x%llx,\"nbits\":0x%x",
                                    x.data,x.nbits);
          id(ir_remote_code).publish_state(s);

  on_raw:
    then:
      - lambda: !lambda |-
          std::string s;
          char out[x.size()*2];
          int i=0;
          for (int n : x) {
            out[i]=n&255;
            out[i+1]=(n>>8)&255;
            i+=2;
          }
          s.assign(out,0,i);
          id(ir_remote_raw).publish_state(base64_encode(s));

remote_transmitter:
  pin: GPIO4
  # Infrared remotes use a 50% carrier signal
  carrier_duty_percent: 50%
